

#include <iostream>
#include <queue>
#include "tree.h"
using namespace std;

template <class K, class E>
void BST<K,E>::Visit(Node<K,E>*ptr)
 { cout << ptr->key << ": " << ptr->element << " ";}
template <class K, class E>
void BST<K,E>::Insert(Node<K,E>* &ptr, K &newkey, E &el){
 if(ptr==0) ptr = new Node<K,E>(newkey, el);
 else if(newkey < ptr->key)Insert(ptr->leftChild, newkey, el);
 else if(newkey > ptr->key)Insert(ptr->rightChild, newkey, el);
 else ptr->element = el;
}
template <class K, class E>
void BST<K,E>:: Preorder(Node<K,E>* currentNode){
  if(currentNode){
        Visit(currentNode);
        Preorder(currentNode->leftChild);
        Preorder(currentNode->rightChild);
     }
}

template <class K, class E>
void BST<K,E>::Inorder(Node<K,E>* currentNode){
  if(currentNode){
        Inorder(currentNode->leftChild);
        Visit(currentNode);
        Inorder(currentNode->rightChild);
   }
}

template <class K, class E>
void BST<K,E>::Postorder(Node<K,E>* currentNode){
  if(currentNode){
        Postorder(currentNode->leftChild);
        Postorder(currentNode->rightChild);
        Visit(currentNode);
  }
}

template <class K, class E>
void BST<K,E>::Levelorder(){
        queue<Node<K,E>*>q;
        Node<K,E>*currentNode = root;
        while(currentNode){
        Visit(currentNode);
        if(currentNode->leftChild)q.push(currentNode->leftChild);
        if(currentNode->rightChild)q.push(currentNode->rightChild);
        if(q.empty())return;
        currentNode = q.front();
        q.pop();
        }
}

//�ο���,����Ʈ���� �����Լ�����
//�������� ť�̿��ؼ� ����
