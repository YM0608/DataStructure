

#include <fstream>
#include <queue>
#include <algorithm>
#include "mstree.h"
int NNODES;

priority_queue< Edge, vector<Edge>, Compare >*PQ;

void sollin(){
        Sets sets(NNODES);
        int nedges = 0;
        int n = 0;
        while(nedges < NNODES - 1){
        while(n <= NNODES -1){
        if(PQ[n].empty())throw "No Spanning Tree Exists. ";
        Edge e = PQ[n].top();PQ[n].pop();
        int v1root = sets.Find(e.v1);int v2root = sets.Find(e.v2);
        if(v1root != v2root){
        //      sets.Union(v1root,v2root); nedges++;
        //      cout << e;
        while(!PQ[v1root].empty()){PQ[v2root].push(PQ[v1root].top());PQ[v1root].pop();}
        PQ[v1root] = PQ[v2root];// �ĺ� ����
        sets.Union(v1root,v2root); nedges++;
        cout << e;
        }
        n++;
        }
        n = 0;
  }
}
void ReadEdges4sollin(istream& is){
        PQ = new priority_queue<Edge, vector<Edge>, Compare >[NNODES];
        Edge e;

        while( GetEdge(is, NNODES, e)){
                PQ[e.v1].push(e);PQ[e.v2].push(e);
        }
}

int main(int argc, char* argv[]){
        ifstream is;
        if(argc == 1)is.open("mstree.dat");else is.open(argv[1]);
        if(!is){cerr << "No such input file\n"; return 1;}
        is >> NNODES;
        if(NNODES < 2){cerr << "#nodes must be 2.." << endl; return 1;}
        try{ ReadEdges4sollin(is); sollin(); }
        catch(char const *str){
        cerr << "Exception: " << str << endl; return 1;
        }
}
