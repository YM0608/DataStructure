

#include <fstream>
#include <queue>
#include "mstree.h"
int NNODES;

priority_queue< Edge, vector<Edge>, Compare >PQ;
queue<Edge>*Q;

void MoveIntoPQ_EdgesOfNode(int v){
//���� v�� ��� �������� PQ�� �ű�
        while(!Q[v].empty()){
        PQ.push(Q[v].front());Q[v].pop();
        }
}

void prim(){
        Sets sets(NNODES);
        int nedges = 0;
        while(nedges < NNODES-1){
        if(PQ.empty())throw "No Spanning Tree Exists. ";
        Edge e = PQ.top(); PQ.pop();
        int v1root = sets.Find(e.v1); int v2root = sets.Find(e.v2);
        if( v1root != v2root){
        sets.Union(v1root,v2root); nedges++;
        cout << e; // e���
        //e�� ���ο� ���� ó��
        MoveIntoPQ_EdgesOfNode(e.v1);
        MoveIntoPQ_EdgesOfNode(e.v2);
        }
        }
}

void ReadEdges4prim(istream& is){
        Q = new queue<Edge>[NNODES];
        Edge e;

        while(GetEdge(is,NNODES,e)){
                Q[e.v1].push(e); Q[e.v2].push(e);
        }
        MoveIntoPQ_EdgesOfNode(0);
}

int main(int argc, char *argv[]){
        ifstream is;
        if(argc==1) is.open("mstree.dat"); else is.open(argv[1]);
        if(!is){cerr << "No such input file\n"; return 1;}
        is >> NNODES;
        if(NNODES < 2){cerr << "#nodes must be 2.." << endl; return 1;}

        try{ReadEdges4prim(is); prim();}
        catch(char const *str){
                cerr<< "Exception: " << str << endl; return 1;
                }
}
