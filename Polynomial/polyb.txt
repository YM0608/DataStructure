
#include <iostream>
#include "polyb.h"
using namespace std;

istream& operator>>(istream& is, Polynomial& p){
int noofterms; float coef; int exp;
is >> noofterms;
for(int i=0;i<noofterms;i++){
is >> coef >> exp;
p.NewTerm(coef,exp);
}
return is;
}
ostream& operator<<(ostream& os, Polynomial& p){
for(int i=0;i < p.terms; i++){
if(p.termArray[i].coef==1&&p.termArray[i].exp==0 ){
os<<"1";
}
else if(i==0){
if(p.termArray[i].coef>1){
os<<p.termArray[0].coef<<"x^"<<p.termArray[0].exp<<' ';
}
else if(p.termArray[i].coef==1){
os<<"x^"<<p.termArray[i].exp<<' ';
}
}
else if(p.termArray[i].coef==1 && p.termArray[i].exp!=0){
os<<"+x^"<<p.termArray[i].exp<<' ';
}
else if(p.termArray[i].coef==-1&&p.termArray[i].exp==0){
os<<"-1"<<' ';
}
else if(p.termArray[i].coef<0&&p.termArray[i].coef!=-1&&p.termArray[i].exp==0){
os<<p.termArray[i].coef<<' ';
}
else if(p.termArray[i].coef>0&&p.termArray[i].coef!=1&&p.termArray[i].exp==0){
os<<'+'<<p.termArray[i].coef<<' ';
}
else if(p.termArray[i].coef==-1&&p.termArray[i].exp!=0){
os<<'-'<<"x^"<<p.termArray[i].exp<<' ';
}
else if(p.termArray[i].coef<0&&p.termArray[i].exp==0){
os<<p.termArray[i].coef<<' ';
}
else if(p.termArray[i].coef<0&&p.termArray[i].exp!=0){
os<<p.termArray[i].coef<<"x^"<<p.termArray[i].exp<<' ';
}
else{
os<<"+"<<p.termArray[i].coef<<"x^"<<p.termArray[i].exp<<' ';
}
}
os<<"\n";
return os;
}
Polynomial::Polynomial():capacity(4),terms(0){
termArray = new Term[capacity];
}
void Polynomial::NewTerm(const float theCoeff,const int theExp){
if(terms==capacity){
capacity *= 2;
Term *temp = new Term[capacity];
copy(termArray,termArray + terms, temp);
delete [] termArray;
termArray = temp;
}
termArray[terms].coef = theCoeff;
termArray[terms++].exp = theExp;
}
Polynomial Polynomial::operator*(Polynomial& b){
Polynomial c;
Polynomial *temp = new Polynomial[terms];
for(int i=0;i<terms;i++){
for(int j=0;j<b.terms;j++){
float a=0;int k=0;
a=termArray[i].coef*b.termArray[j].coef;
k=termArray[i].exp+b.termArray[j].exp;
temp[i].NewTerm(a,k);
}
}
c=temp[0];
for(int i=1;i<terms;i++){
c = c+temp[i];
}
return c;
}
Polynomial Polynomial::operator+(Polynomial& b){
Polynomial c;
int aPos=0,bPos=0;
while((aPos<terms)&&(bPos<b.terms))
if(termArray[aPos].exp==b.termArray[bPos].exp){
float t=termArray[aPos].coef+b.termArray[bPos].coef;
if(t)c.NewTerm(t,termArray[aPos].exp);
aPos++;bPos++;
}
else if(termArray[aPos].exp<b.termArray[bPos].exp){
c.NewTerm(b.termArray[bPos].coef,b.termArray[bPos].exp);
bPos++;
}
else{
c.NewTerm(termArray[aPos].coef,termArray[aPos].exp);
aPos++;
}
for(;aPos<terms;aPos++)
c.NewTerm(termArray[aPos].coef,termArray[aPos].exp);
for(;bPos<b.terms;bPos++)
c.NewTerm(b.termArray[bPos].coef,b.termArray[bPos].exp);
return c;
}
