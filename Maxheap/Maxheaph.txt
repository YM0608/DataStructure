
#include<iostream>
using namespace std;

template<class T>
class MaxHeap{
public:
        MaxHeap(int);
        void Push(const T& e);
        void Pop();
        bool IsEmpty(){return heapSize == 0;}
        T Top(){return heap[1];}
private:
        int heapSize;
        int capacity;
        T *heap;
template<class T2>
friend ostream &operator<<(ostream &,MaxHeap<T2>&);
};

template<class T>
void ChangeSize1D(T *&a,const int oldSize,const int newSize){
        if(newSize<0)throw "New Length must be>=0";

        T* temp=new T[newSize];
        int number = min(oldSize,newSize);
        copy(a,a+number,temp);
        delete[]a;
        a=temp;
}

template<class T>
ostream& operator<<(ostream& os, MaxHeap<T>& H){
        os << "<Heap contents> ";
        for(int i=1;i<=H.heapSize;i++)
                os << i << ":" << H.heap[i] << " ";
        os << endl;
}

template <class T>
MaxHeap<T>::MaxHeap(int theCapacity = 10):heapSize(0){
        if(theCapacity<1)throw "Must be +ve";
        capacity = theCapacity;
        heap = new T[capacity+1];
}

template<class T>
void MaxHeap<T>::Push(const T&e){
        if(heapSize == capacity){
                ChangeSize1D(heap,capacity,2*capacity);
                capacity*=2;
        }

        int currentNode = ++heapSize;
        while(currentNode != 1 && heap[currentNode / 2] < e){
                heap[currentNode]=heap[currentNode / 2];
                currentNode /= 2;
        }
        heap[currentNode] = e;
}

template<class T>
void MaxHeap<T>::Pop(){
        if(IsEmpty())throw "Heap is empty. Cannot delete.";
        heap[1].~T();

        T lastE = heap[heapSize--];
        int currentNode = 1;
        int child = 2;
        while(child<=heapSize){
                if(child<heapSize && heap[child]<heap[child+1])child++;

                if(lastE>=heap[child])break;

                heap[currentNode]=heap[child];
                currentNode = child; child*=2;
                }
        heap[currentNode] = lastE;
}
